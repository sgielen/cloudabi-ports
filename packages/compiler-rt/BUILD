# Copyright (c) 2015-2018 Nuxi, https://nuxi.nl/
#
# SPDX-License-Identifier: BSD-2-Clause


def build(ctx):
    root = ctx.extract('%(name)s-%(version)s.src')
    headers = ctx.extract('cloudlibc/v0.102').path('src/include')
    abi_headers = ctx.extract('cloudabi/v0.20').path('headers')

    sources = {
        'absvdi2.c',
        'absvsi2.c',
        'absvti2.c',
        'adddf3.c',
        'addsf3.c',
        'addtf3.c',
        'addvdi3.c',
        'addvsi3.c',
        'addvti3.c',
        'ashldi3.c',
        'ashlti3.c',
        'ashrdi3.c',
        'ashrti3.c',
        'clear_cache.c',
        'clzdi2.c',
        'clzsi2.c',
        'clzti2.c',
        'cmpdi2.c',
        'cmpti2.c',
        'comparedf2.c',
        'comparesf2.c',
        'comparetf2.c',
        'ctzdi2.c',
        'ctzsi2.c',
        'ctzti2.c',
        'divdc3.c',
        'divdf3.c',
        'divdi3.c',
        'divmoddi4.c',
        'divmodsi4.c',
        'divsc3.c',
        'divsf3.c',
        'divsi3.c',
        'divtf3.c',
        'divti3.c',
        'divxc3.c',
        'enable_execute_stack.c',
        'eprintf.c',
        'extenddftf2.c',
        'extendhfsf2.c',
        'extendsfdf2.c',
        'extendsftf2.c',
        'ffsdi2.c',
        'ffsti2.c',
        'fixdfdi.c',
        'fixdfsi.c',
        'fixdfti.c',
        'fixsfdi.c',
        'fixsfsi.c',
        'fixsfti.c',
        'fixtfdi.c',
        'fixtfsi.c',
        'fixunsdfdi.c',
        'fixunsdfsi.c',
        'fixunsdfti.c',
        'fixunssfdi.c',
        'fixunssfsi.c',
        'fixunssfti.c',
        'fixunstfdi.c',
        'fixunstfsi.c',
        'fixunsxfdi.c',
        'fixunsxfsi.c',
        'fixunsxfti.c',
        'fixxfdi.c',
        'fixxfti.c',
        'floatdidf.c',
        'floatdisf.c',
        'floatdixf.c',
        'floatsidf.c',
        'floatsisf.c',
        'floatsitf.c',
        'floattidf.c',
        'floattisf.c',
        'floattixf.c',
        'floatundidf.c',
        'floatundisf.c',
        'floatundixf.c',
        'floatunsidf.c',
        'floatunsisf.c',
        'floatunsitf.c',
        'floatuntidf.c',
        'floatuntisf.c',
        'floatuntixf.c',
        'int_util.c',
        'lshrdi3.c',
        'lshrti3.c',
        'moddi3.c',
        'modsi3.c',
        'modti3.c',
        'muldc3.c',
        'muldf3.c',
        'muldi3.c',
        'mulodi4.c',
        'mulosi4.c',
        'muloti4.c',
        'mulsc3.c',
        'mulsf3.c',
        'multf3.c',
        'multi3.c',
        'mulvdi3.c',
        'mulvsi3.c',
        'mulvti3.c',
        'mulxc3.c',
        'negdf2.c',
        'negdi2.c',
        'negsf2.c',
        'negti2.c',
        'negvdi2.c',
        'negvsi2.c',
        'negvti2.c',
        'paritydi2.c',
        'paritysi2.c',
        'parityti2.c',
        'popcountdi2.c',
        'popcountsi2.c',
        'popcountti2.c',
        'powidf2.c',
        'powisf2.c',
        'powitf2.c',
        'powixf2.c',
        'ppc/floatditf.c',
        'ppc/gcc_qadd.c',
        'ppc/gcc_qmul.c',
        'ppc/gcc_qsub.c',
        'ppc/multc3.c',
        'subdf3.c',
        'subsf3.c',
        'subtf3.c',
        'subvdi3.c',
        'subvsi3.c',
        'subvti3.c',
        'trampoline_setup.c',
        'truncdfhf2.c',
        'truncdfsf2.c',
        'truncsfhf2.c',
        'trunctfdf2.c',
        'trunctfsf2.c',
        'ucmpdi2.c',
        'ucmpti2.c',
        'udivdi3.c',
        'udivmoddi4.c',
        'udivmodsi4.c',
        'udivmodti4.c',
        'udivsi3.c',
        'udivti3.c',
        'umoddi3.c',
        'umodsi3.c',
        'umodti3.c',
        'x86_64/floatdidf.c',
        'x86_64/floatdisf.c',
        'x86_64/floatdixf.c',
        'x86_64/floatundidf.S',
        'x86_64/floatundisf.S',
        'x86_64/floatundixf.S',
    }
    if ctx.cpu().startswith('armv'):
        sources |= {
            'arm/aeabi_idivmod.S',
            'arm/aeabi_ldivmod.S',
            'arm/aeabi_uidivmod.S',
            'arm/aeabi_uldivmod.S',
        }

    srcdir = root.path('lib/builtins')
    library = ctx.archive(
        srcdir.path(f).compile([
            '-I%s' % headers,
            '-DCRT_HAS_128BIT=',
        ]) for f in sources)
    library.install('lib/libcompiler_rt.a')

    asan_arch = None

    if ctx.cpu() == 'i686':
        asan_arch = 'i386'
    elif ctx.cpu() == 'x86_64':
        asan_arch = 'x86_64'

    if asan_arch is not None:
      asan_sources = {
           'asan/asan_allocator.cc',
           'asan/asan_activation.cc',
           'asan/asan_cloudabi.cc',
           'asan/asan_debugging.cc',
           'asan/asan_descriptions.cc',
           'asan/asan_errors.cc',
           'asan/asan_fake_stack.cc',
           'asan/asan_flags.cc',
           'asan/asan_fuchsia.cc',
           'asan/asan_globals.cc',
           'asan/asan_globals_win.cc',
           'asan/asan_interceptors.cc',
           'asan/asan_interceptors_memintrinsics.cc',
           'asan/asan_linux.cc',
           'asan/asan_mac.cc',
           'asan/asan_malloc_linux.cc',
           'asan/asan_malloc_mac.cc',
           'asan/asan_malloc_win.cc',
           'asan/asan_memory_profile.cc',
           'asan/asan_poisoning.cc',
           'asan/asan_posix.cc',
           'asan/asan_premap_shadow.cc',
           'asan/asan_report.cc',
           'asan/asan_rtl.cc',
           'asan/asan_shadow_setup.cc',
           'asan/asan_stack.cc',
           'asan/asan_stats.cc',
           'asan/asan_suppressions.cc',
           'asan/asan_thread.cc',
           'asan/asan_win.cc',
           'asan/asan_preinit.cc',
           'sanitizer_common/sanitizer_common_libcdep.cc',
           'sanitizer_common/sanitizer_allocator_checks.cc',
           'sanitizer_common/sancov_flags.cc',
           'sanitizer_common/sanitizer_coverage_fuchsia.cc',
           'sanitizer_common/sanitizer_coverage_libcdep_new.cc',
           'sanitizer_common/sanitizer_coverage_win_sections.cc',
           'sanitizer_common/sanitizer_linux_libcdep.cc',
           'sanitizer_common/sanitizer_mac_libcdep.cc',
           'sanitizer_common/sanitizer_posix_libcdep.cc',
           'sanitizer_common/sanitizer_stacktrace_libcdep.cc',
           'sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc',
           'sanitizer_common/sanitizer_symbolizer_libcdep.cc',
           'sanitizer_common/sanitizer_symbolizer_posix_libcdep.cc',
           'sanitizer_common/sanitizer_unwind_linux_libcdep.cc',
           'sanitizer_common/sanitizer_allocator.cc',
           'sanitizer_common/sanitizer_cloudabi.cc',
           'sanitizer_common/sanitizer_common.cc',
           'sanitizer_common/sanitizer_deadlock_detector1.cc',
           'sanitizer_common/sanitizer_deadlock_detector2.cc',
           'sanitizer_common/sanitizer_errno.cc',
           'sanitizer_common/sanitizer_file.cc',
           'sanitizer_common/sanitizer_flags.cc',
           'sanitizer_common/sanitizer_flag_parser.cc',
           'sanitizer_common/sanitizer_fuchsia.cc',
           'sanitizer_common/sanitizer_libc.cc',
           'sanitizer_common/sanitizer_libignore.cc',
           'sanitizer_common/sanitizer_linux.cc',
           'sanitizer_common/sanitizer_linux_s390.cc',
           'sanitizer_common/sanitizer_mac.cc',
           'sanitizer_common/sanitizer_persistent_allocator.cc',
           'sanitizer_common/sanitizer_platform_limits_linux.cc',
           'sanitizer_common/sanitizer_platform_limits_netbsd.cc',
           'sanitizer_common/sanitizer_platform_limits_posix.cc',
           'sanitizer_common/sanitizer_platform_limits_solaris.cc',
           'sanitizer_common/sanitizer_posix.cc',
           'sanitizer_common/sanitizer_printf.cc',
           'sanitizer_common/sanitizer_procmaps_common.cc',
           'sanitizer_common/sanitizer_procmaps_freebsd.cc',
           'sanitizer_common/sanitizer_procmaps_linux.cc',
           'sanitizer_common/sanitizer_procmaps_mac.cc',
           'sanitizer_common/sanitizer_procmaps_solaris.cc',
           'sanitizer_common/sanitizer_procmaps_cloudabi.cc',
           'sanitizer_common/sanitizer_solaris.cc',
           'sanitizer_common/sanitizer_stackdepot.cc',
           'sanitizer_common/sanitizer_stacktrace.cc',
           'sanitizer_common/sanitizer_stacktrace_printer.cc',
           'sanitizer_common/sanitizer_stoptheworld_mac.cc',
           'sanitizer_common/sanitizer_suppressions.cc',
           'sanitizer_common/sanitizer_symbolizer.cc',
           'sanitizer_common/sanitizer_symbolizer_fuchsia.cc',
           'sanitizer_common/sanitizer_symbolizer_libbacktrace.cc',
           'sanitizer_common/sanitizer_symbolizer_mac.cc',
           'sanitizer_common/sanitizer_symbolizer_win.cc',
           'sanitizer_common/sanitizer_tls_get_addr.cc',
           'sanitizer_common/sanitizer_thread_registry.cc',
           'sanitizer_common/sanitizer_win.cc',
           'sanitizer_common/sanitizer_termination.cc',
           'interception/interception_cloudabi.cc',
           'interception/interception_linux.cc',
           'interception/interception_mac.cc',
           'interception/interception_win.cc',
           'interception/interception_type_test.cc',
           'lsan/lsan_common.cc',
           'lsan/lsan_common_linux.cc',
           'lsan/lsan_common_mac.cc',
           'lsan/lsan_common.cc',
           'ubsan/ubsan_diag.cc',
           'ubsan/ubsan_init.cc',
           'ubsan/ubsan_flags.cc',
           'ubsan/ubsan_handlers.cc',
           'ubsan/ubsan_value.cc',
      }
      srcdir = root.path('lib')
      library = ctx.archive(
          srcdir.path(f).compile([
              '-I%s' % headers,
              '-I%s' % abi_headers,
              '-I%s' % srcdir,
              '-DHAVE_RPC_XDR_H=0',
              '-DHAVE_TIRPC_RPC_XDR_H=0',
              '-std=c++11',
              '-Wno-macro-redefined',
          ]) for f in asan_sources)
      library.install('lib/libclang_rt.asan-%s.a' % asan_arch)

      asan_cxx_sources = {
           'asan/asan_new_delete.cc',
           'ubsan/ubsan_handlers_cxx.cc',
           'ubsan/ubsan_type_hash.cc',
           'ubsan/ubsan_type_hash_itanium.cc',
           'ubsan/ubsan_type_hash_win.cc',
      }

      library = ctx.archive(
          srcdir.path(f).compile([
              '-I%s' % headers,
              '-I%s' % abi_headers,
              '-I%s' % srcdir,
              '-DUBSAN_CAN_USE_CXXABI',
              '-std=c++11',
          ]) for f in asan_cxx_sources)
      library.install('lib/libclang_rt.asan_cxx-%s.a' % asan_arch)

package(
    name='compiler-rt',
    version='6.0.0',
    homepage='http://compiler-rt.llvm.org/',
    build_cmd=build,
    lib_depends={'cloudabi'})

distfile(
    name='compiler-rt-6.0.0.src.tar.xz',
    checksum='d0cc1342cf57e9a8d52f5498da47a3b28d24ac0d39cbc92308781b3ee0cea79a',
    master_sites={'http://releases.llvm.org/6.0.0/'})
